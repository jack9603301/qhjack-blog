1732715911
a:2:{s:7:"content";s:5406:"<p>最近在学习k8s，这是笔记</p>
<p>===</p>
<h1>了解Kubernetes应用</h1>
<h2><code>Label</code>和<code>Label Selector</code></h2>
<p><code>Label</code>是<code>Kubernetes</code>系统中的另一个核心概念，相当于我们熟悉的标签。一个<code>Label</code>是一个<code>key=value</code>的键值对，其中的<code>key</code>与<code>value</code>由用户自己指定。<code>Label</code>可以被附加到各种资源对象上，例如<code>Node</code>、<code>Pod</code>、<code>Service</code>、<code>Volume</code>、<code>Deployment</code>等。一个资源对象可以定义任意数量的<code>Label</code>，同一个<code>Label</code>也可以被添加到任意数量的资源对象上。<code>Label</code>通常在定义资源对象时确定，也可以在对象创建后动态的添加或者删除。我们可以通过给指定的资源对象捆绑一个或者多个不同的<code>Label</code>来实现多维度的资源对象分组管理功能，以便灵活、方便地进行资源分配、查询管理、调度、配置、部署等，例如，部署不同版本的应用到不同的环境下，以便监控、分析应用（日志记录、监控、告警）等。一些常见的<code>Label</code>示例如下。</p>
<ul>
<li>版本<code>Label</code>: <code>release: stable</code>和<code>release: canary</code></li>
<li>环境<code>Label</code>: <code>environment: dev</code>、<code>environment: qa</code>和<code>environment: production</code></li>
<li>架构<code>Label</code>: <code>tier: frontend</code>、<code>tier: backend</code>和<code>tier: middleware</code></li>
<li>分区<code>Label</code>: <code>partition: customerA</code>和<code>partition: customerB</code></li>
<li>质量管控<code>Label</code>: <code>track: daily</code>和<code>track: weekly</code></li>
</ul>
<p>给某个资源定义<code>Label</code>，就相当于给它打了一个标签，随后可以通过<code>Label Selector</code>(标签选择器)查询和筛选拥有某些<code>Label</code>的资源对象，<code>Kubernetes</code>通过这种方式实现了类似SQL的简单而又通用的对象查询机制。<code>Label Selector</code>可以被类比为SQL语句中的where查询条件，例如，<code>name: redis-salve</code>这个<code>Label Selector</code>在作用于<code>Pod</code>时，可以被类比为<code>select * from pod where pod's name = 'redis-salve'</code>语句。当前有两种<code>Label Selector</code>表达式：</p>
<ol>
<li>基于等式的<code>Label Selector</code>表达式</li>
<li>基于集合的<code>Label Selector</code>表达式</li>
</ol>
<p>基于等式的<code>Label Selector</code>表达式采用等式类表达式匹配<code>Label</code>，下面是一些具体的实例：</p>
<ul>
<li><code>name = redis-salve</code>: 匹配所有具有<code>name=redis-slave</code> Label的资源对象</li>
<li><code>env != production</code>:  匹配所有不具有<code>env=production</code> Label的资源对象，比如 <code>env = test</code> 就是满足此条件的<code>Label</code>之一</li>
</ul>
<p>基于集合的<code>Label Selector</code>表达式则采用集合操作类表达式匹配<code>Label</code>，下面是一些具体的示例。</p>
<ul>
<li><code>name in ( redis-master, redis-salve)</code>: 匹配所有具有<code>name=redis-master</code> Label或<code>name=redis-salve</code> Label资源对象</li>
<li><code>name not in ( php-frontend)</code>: 匹配所有不具有<code>name=php-frontend</code> Label资源对象</li>
</ul>
<p>我们可以通过多个<code>Label Selector</code>表达式组合来实现复杂的条件选择，在多个表达式之间用<code>,</code>进行分割即可，几个条件之间是AND的关系，即同时满足多个条件，比如下面的示例：</p>
<pre><code>name=redis-slave,env!=production
name notin (php-frontend),env!=production</code></pre>
<p>在前面的【Hello,world】示例中只用了一个<code>name=XXX</code>的<code>Label Selector</code>,来看一个更复杂的示例：假设一个Pod定义了3个Label: release、env和role,不同的Pod定义了不同的Label值，如果设置<code>role=frontend</code>是Label Selector,则会选取<code>Node1</code>和<code>Node2</code>上的Pod;如果设置<code>release=beta</code>的Label Selector，则会选取Node2和Node3上的Pod。</p>
<p>总之，使用Label可以给对象创建多组标签，Label和Label Selector共同构成了Kubernetes系统中核心的应用模型，可被管理对象精细的分组管理，同时实现了整个集群的高可用性。</p>
<p>Label也是Pod的重要属性之一，其重要性仅次于Pod的端口，在实际生产环境下，我们几乎看不到没有Label的Pod,以myweb Pod为例，下面给它设定了<code>app=myweb</code> Label:</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Pod
metadata:
  name: myweb
  labels:
    app: myweb</code></pre>
<p>对应的Service myweb就是通过下面的Label Selector与myweb Pod发生关联的：</p>
<pre><code class="language-yaml">spec:
  selector:
    app: myweb</code></pre>
<p>所以我们看到，Service很重要的一个属性就是Label Selector,如果我们不小心把Label写错了，就会出现指鹿为马的闹。如果恰好匹配到了另一个Pod实例。而且对应的容器端口恰好正确，服务可以正常连接，则很难排查问题，特别是在有众多Service的复杂系统中</p>";s:12:"content_meta";N;}