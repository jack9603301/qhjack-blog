1734825526
a:2:{s:7:"content";s:5138:"<h1>k8s的组织架构</h1>
<p>k8s一般由三个或者三个以上节点组成，它遵循集群的一般要求，并且有以下基础类型组成：</p>
<ol>
<li>Master 节点</li>
</ol>
<p>Master 是集群的控制节点，即主节点。 在Kubernetes集群中需要由一个或者一组 Master, 负责管理和控制整个集群。 Master通常占有一台独立的服务器（在高可用模式下建议使用三台或者以上的服务器），是整个集群的【大脑】，如果它发生宕机或者不可用，那么对集群中容器应用的管理都将无法实施。</p>
<p>在 Master 上运行着以下关键进程</p>
<ul>
<li>Kubernetes API Server(kube-apiserver): 提供 HTTP RESTful API接口的主要服务，是Kubernetes中对所有资源进行增、删、改、查等操作的唯一入口，也是集群控制的入口进程。</li>
<li>Kubernetes Controller Manager(kube-controller-manager): Kubernetes 中所有资源对象的自动化控制中心，可以将其理解为资源对象的【大总管】</li>
<li>Kubernetes Scheduler(kube-scheduler): 负责将资源调度(Pod 调度)的进程，相当于公交调度室。</li>
</ul>
<p>另外，在Master上通常还需要部署<code>etcd</code>服务。</p>
<p>如果将原本部署在Master上的这些进程以<code>Pod</code>的方式部署在<code>Node</code>上，比如采用<code>kubedam</code>安装<code>Kubernetes</code>集群，那么此时<code>Kubernetes</code>集群中就没有<code>Master</code>了，因为所有节点都是<code>Node</code>。</p>
<ol start="2">
<li>Node节点</li>
</ol>
<p>在<code>Kubernetes</code>中，除<code>Master</code>外的其他服务器被称为<code>Node</code>，<code>Node</code>在较早的一些版本也被称为<code>Minion</code>。与<code>Master</code>一样，<code>Node</code>既可以的一台物理主机，也可以是一台虚拟机。<code>Node</code>是<code>Kubernetes</code>集群的工作负载节点，每个<code>Node</code>都会被<code>Master</code>分配一些工作负载(<code>Docker</code>容器),当某个<code>Node</code>宕机时，其上的工作负载都会被<code>Master</code>自动转移到其他<code>Node</code>上。在每个<code>Node</code>上都运行着以下关键进程：</p>
<ul>
<li>kubelet: 负责<code>Pod</code>对应容器的创建、启停等任务，同时与<code>Master</code>密切协作，实现集群管理的基本功能</li>
<li>kube-proxy: 是实现<code>Kubernetes Service</code>通讯与负载均衡机制的服务</li>
<li>容器运行时</li>
</ul>
<p><code>Node</code>可以在运行期间被动态增加到<code>Kubernetes</code>集群中，前提是在这个<code>Node</code>上已经正确的安装、配置和启动了上述关键进程。在默认情况下，<code>kubelet</code>会向<code>Master</code>注册自己，这也是<code>Kubernetes</code>推荐的<code>Node</code>管理方式。一旦<code>Node</code>被纳入集群管理范畴，<code>kubelet</code>进程就会定时向<code>Master</code>汇报自身的情报，例如操作系统、主机CPU和内存的使用情况，以及当前有哪些<code>Pod</code>在运行等，这样<code>Master</code>就可以获知每个<code>Node</code>的资源使用情况，并实现高效均衡的资源调度策略了，而某个<code>Node</code>在超过指定时间不上报信息时，会被<code>Master</code>判定为【失联】，该<code>Node</code>状态被标记为【NotReady】，<code>Master</code>随后会触发【故障转移】的的自动流程。</p>
<p>查看集群中有多少节点的命令如下：</p>
<pre><code class="language-bash">kubectl get nodes</code></pre>
<h1>命名空间</h1>
<p>命名空间是集群类里面一个重要的基础概念，它在很多情况可以实现多租户隔离，典型的一个思路是给每个租户分配一个命名空间，命名空间属于<code>Kubernetes</code>集群范畴的资源对象，在一个集群可以创建多个命名空间，每个命名空间都是独立的存在，属于不同命名空间的资源对象在逻辑上互相隔离。在每个<code>Kubernetes</code>集群安装完成且正常运行后，<code>Master</code>会自动创建两个命名空间：</p>
<ul>
<li>default（默认）</li>
<li>kub-system(Kubernetes系统级)</li>
</ul>
<p>用户创建的资源对象如果没有指定命名空间，则被默认都安装在<code>kube-system</code>命名空间中。我们可以通过命名空间将集群的资源对象【分配】到不同的命名空间中，形成逻辑上分组的不同项目、小组或者用户组，便于不同的分组共享整个集群的资源的同时被分别管理。当给每个租户都创建了一个命名空间来实现多租户管理的资源隔离时，还能结合<code>Kubernetes</code>的资源配额管理，限定不同租户能占用的资源，例如CPU私有量和内存使用量等</p>
<p>命名空间的定义如下：</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Namespace
metadata:
  name: development</code></pre>
<p>执行以下命令来创建此定义：</p>
<pre><code>kubectl apply -f &lt;namespace.yaml&gt;</code></pre>";s:12:"content_meta";N;}